tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
freq(cluster11[,1])
freq(cluster11[,c(1,3,6)])
freq(cluster11[,1], main="vehicle class")
freq(cluster11[,c(1,3,6)])
freq(cluster22[,c(1,3,6)])
kumeleme$clusters<-km_result$cluster
kumeleme$clusters<-as.factor(kumeleme$clusters)
cluster1<-which(kumeleme$clusters==1)
cluster2<-which(kumeleme$clusters==2)
cluster3<-which(kumeleme$clusters==3)
cluster4<-which(kumeleme$clusters==4)
cluster11<-kumeleme[cluster1,]
cluster22<-kumeleme[cluster2,]
cluster33<-kumeleme[cluster3,]
cluster44<-kumeleme[cluster4,]
freq(cluster11[,c(1,3,6)])
freq(cluster22[,c(1,3,6)])
freq(cluster33[,c(1,3,6)])
freq(cluster33[,c(1,3,6)])
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=1, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=3, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=4, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=5, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=1, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=3, lines=0)
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=4, lines=0)
data2$clusters<-km_result$cluster
data2$clusters<-as.factor(data2$clusters)
freq(data2$clusters)
View(dend)
data3<-data[,-c(6,8,9,11)]
colnames(data3)= c("Make","Model","VehicleClass","EngineSize","Cylinders","FuelType","FuelConsComp","CO2Emission","CO2Rating","SmogRating","TransmissionType")
set.seed(17051999)
trainIndex<-sample(1:nrow(data3),size = round(0.7*nrow(data3)), replace = FALSE)
train_data<-data3[trainIndex,]
test_data<-data3[-trainIndex,]
test_data<-data3[-trainIndex,]
tree2<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType, data = train_data, method = "class")
fancyRpartPlot(tree2, main = "Fuel type tree", type = 2)
confmat_FT<-table(predict(tree2, test_data, type = "class"), test_data$FuelType)
confmat_FT<-confmat_FT[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT)
tree2_preprun<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType,
data = train_data, method = "class",
control = rpart.control(cp=0, maxdepth = 9, minsplit = 21))
fancyRpartPlot(tree2_preprun, main = "Fuel Type Prepruned Tree",type = 2)
confmat_FT_Pre<-table(predict(tree2_preprun, test_data, type = "class"), test_data$FuelType)
confmat_FT_Pre<-confmat_FT_Pre[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT_Pre)
tree2_preprun<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType,
data = train_data, method = "class",
control = rpart.control(cp=0, maxdepth = 10, minsplit = 21))
fancyRpartPlot(tree2_preprun, main = "Fuel Type Prepruned Tree",type = 2)
confmat_FT_Pre<-table(predict(tree2_preprun, test_data, type = "class"), test_data$FuelType)
confmat_FT_Pre<-confmat_FT_Pre[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT_Pre)
tree2_preprun<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType,
data = train_data, method = "class",
control = rpart.control(cp=0, maxdepth = 8, minsplit = 21))
fancyRpartPlot(tree2_preprun, main = "Fuel Type Prepruned Tree",type = 2)
Önsel Budama yapılan model ağacı verilmiştir.
```{r}
confmat_FT_Pre<-table(predict(tree2_preprun, test_data, type = "class"), test_data$FuelType)
confmat_FT_Pre<-confmat_FT_Pre[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT_Pre)
confmat_FT<-table(predict(tree2, test_data, type = "class"), test_data$FuelType)
confmat_FT<-confmat_FT[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT)
tree2_preprun<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType,
data = train_data, method = "class",
control = rpart.control(cp=0, maxdepth = 8, minsplit = 21))
fancyRpartPlot(tree2_preprun, main = "Fuel Type Prepruned Tree",type = 2)
confmat_FT_Pre<-table(predict(tree2_preprun, test_data, type = "class"), test_data$FuelType)
confmat_FT_Pre<-confmat_FT_Pre[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT_Pre)
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 21))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 20))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 20))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 20))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 20))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 20))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
```{r}
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 21))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
```{r}
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 21))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 22))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
```{r}
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
predict(tree3, test_data)
t(predict(tree3, test_data))
table(predict(tree3, test_data), test_data$FuelConsComp)
asdfg<-t(table(predict(tree3, test_data), test_data$FuelConsComp))
asdfgz<-as.data.frame(asdfg)
View(asdfgz)
View(data3)
predict(tree3, test_data), test_data$FuelConsComp
predict(tree3,test_data, type = "anova")
predict(tree3,test_data, type = "vector")
View(data3)
asdfg<-t(table(predict(tree3,test_data, type = "vector"), test_data$FuelConsComp))
asdfgz<-as.data.frame(asdfg)
View(tree3)
tree3[["y"]]
tree3[["frame"]][["var"]]
tree3[["frame"]][["complexity"]]
tree3[["frame"]][["complexity"]]
asdfg<-tree3[["frame"]][["complexity"]]
asdfgz<-as.data.frame(asdfg)
View(asdfgz)
asdfgz$asdfg<-round(asdfg,2)
View(tree2)
tree2[["y"]]
tree3[["y"]]
tree3[["y"]][["17"]]
tree3[["y"]][["416"]]
tree3[["y"]]$value
tree3[["y"]]
asdfg<-tree3[["y"]]
asdfgz<-as.data.frame(asdfg)
View(asdfgz)
asdfg<-asdfg %>% tibble::rownames_to_column(var = "index2")
asdfgz<-as.data.frame(asdfg)
asdfgz$asdfg<-round(asdfg,2)
asdfg<-asdfg %>% tibble::rownames_to_column(var = "index2")
asdfg<-asdfg %>% tibble::rownames_to_column(var = "index2")
asdfgz<-asdfgz %>% tibble::rownames_to_column(var = "index2")
asdfgz<-asdfgz[,-1]
asdfgz$real<-data3$FuelConsComp
asdfg<-tree3[["y"]]
asdfgz<-as.data.frame(asdfg)
asdfgz<-asdfgz %>% tibble::rownames_to_column(var = "index2")
asdfgz<-asdfgz[,-1]
asdfgz$real<-data3$FuelConsComp
asdfg<-tree3[["y"]]
asdfgz<-as.data.frame(asdfg)
asdfgz<-asdfgz %>% tibble::rownames_to_column(var = "index2")
asdfgz<-asdfgz[,-1]
basdf<-data3$FuelConsComp
basdfg<-as.data.frame([asdfgz,basdfg])
remove(asdfg)
remove(asdfgz)
remove(basdf)
tree3[["y"]]
tree3$y
tree3$y$value
y$value
asd<-tree3$y
asd
asd[,2]
asd[2,]
asd<-tree3$y
t(asd)
asd<-tree3$y
asd
tree3[["cptable"]]
remove(asd)
data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),2))
abc<-data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),2))
View(abc)
2+6
abc<-data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),2))
abc<-abc %>% tibble::rownames_to_column(var = "index2")
abc<-abc[,-1]```
abc<-abc %>% tibble::rownames_to_column(var = "index2")
library(PerformanceAnalytics)
library(readxl)
library(rattle)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyverse)
library(corrplot)
library(matlib)
library(funModeling)
library(openxlsx)
library(stringr)
library(DescTools)
library(dendextend)
library(haven)
library(factoextra)
library(cluster)
library(plotly)
library(haven)
library(dendextend)
library(GGally)
library(superml)
library(rpart)
library(rpart.plot)
library(caret)
abc<-data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),2))
abc<-abc %>% tibble::rownames_to_column(var = "index2")
abc<-abc[,-1]```
abc<-abc[,-1]
abc
abc
View(abc)
abc$model<-data3$Model
abc$model<-data3$Model
abc$model<-test_data$Model
View(test_data)
library(PerformanceAnalytics)
library(readxl)
library(rattle)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyverse)
library(corrplot)
library(matlib)
library(funModeling)
library(openxlsx)
library(stringr)
library(DescTools)
library(dendextend)
library(haven)
library(factoextra)
library(cluster)
library(plotly)
library(haven)
library(dendextend)
library(GGally)
library(superml)
library(rpart)
library(rpart.plot)
library(caret)
data <- read_excel("C:/Users/tarik/Desktop/okul/tez2/MY2022 Fuel Consumption Ratings.xlsx")
data<-as.data.frame(data)
data$Make<-as.factor(data$Make)
data$`Vehicle Class`<-as.factor(data$`Vehicle Class`)
data$Transmission<-as.factor(data$Transmission)
data$`Fuel Type`<-as.factor(data$`Fuel Type`)
data$TransmissionType<-str_extract(data$Transmission, "[A-Z]+")
data$TransmissionType<-as.factor(data$TransmissionType)
data<-data[,-1]
summary(data)
two_seater<-which(data$`Vehicle Class` =="Two-seater")
data<-data[-two_seater,]
data2<-data
diesel<-which(data$`Fuel Type`=="D")
data<-data[-diesel,]
electric<-which(data$`Fuel Type`=="E")
data<-data[-electric,]
data2<-data
summary(data)
freq(data[,-c(1,2)])
ggplot(data,aes(data$`Fuel Consumption (City (L/100 km)`))+
labs(title="Şehir içi yakıt tüketimi")+
geom_histogram(fill="steelblue",colour="black", alpha=0.6, title="Motor Hacmi")
summary(data$`Fuel Consumption (City (L/100 km)`)
ggplot(data, aes(y=data$`Fuel Consumption (City (L/100 km)`, x=factor(data$`Fuel Type`),fill=data$`Fuel Type`))+
geom_boxplot()+
labs(title = "Yakıt tipine göre şehir içi yakıt tüketimi", x="Yakıt tipi", y="Şehir içi yakıt tüketimi")
ggplot(data,aes(data$`Fuel Consumption(Hwy (L/100 km))`))+
labs(title="Şehir dışı yakıt tüketimi")+
geom_histogram(fill="steelblue",colour="black", alpha=0.6, title="Motor Hacmi")
summary(data$`Fuel Consumption(Hwy (L/100 km))`)
ggplot(data, aes(y=data$`Fuel Consumption(Hwy (L/100 km))`, x=factor(data$`Fuel Type`),fill=data$`Fuel Type`))+
geom_boxplot()+
labs(title = "Yakıt tipine göre şehir dışı yakıt tüketimi", x="Yakıt tipi", y="Şehir içi yakıt tüketimi")
scatter1<-ggplot(data, aes(data$`Fuel Consumption (City (L/100 km)`,data$`Fuel Consumption(Hwy (L/100 km))`, color=data$`Fuel Type`))+
geom_point(size=1,alpha=0.8)+
geom_smooth(method = "lm", col="green",se = FALSE)+
labs(title = "Şehir içi ve şehir dışı yakıt tüketimi saçılım grafiği", x="şehir içi", y="şehir dışı")
ggplotly(scatter1)
ggplot(data,aes(data$`Fuel Consumption(Comb (L/100 km))`))+
labs(title="Ortalama yakıt tüketimi")+
geom_histogram(fill="steelblue",colour="black", alpha=0.6)
ggplot(data, aes(y=data$`Fuel Consumption(Comb (L/100 km))`, x=factor(data$`Fuel Type`),fill=data$`Fuel Type`))+
geom_boxplot()+
labs(title = "Yakıt tipine göre ortalama yakıt tüketimi", x="Yakıt tipi", y="Ortalama yakıt tüketimi")
ggplot(data, aes(y=data$`Fuel Consumption(Comb (L/100 km))`, x=factor(data$TransmissionType),fill=data$TransmissionType))+
geom_boxplot()+
labs(title = "Şanzıman tipine göre ortalama yakıt tüketimi", x="Şanzıman tipi", y="Ortalama yakıt tüketimi")
data<-data %>% tibble::rownames_to_column(var = "index2")
data<-data[,-1]
data[736,]
data<-data[-736,]
data<-data[-511,]
ggplot(data, aes(y=data$`Fuel Consumption(Comb (L/100 km))`, x=factor(data$`Fuel Type`),fill=data$`Fuel Type`))+
geom_boxplot()+
labs(title = "Yakıt tipine göre ortalama yakıt tüketimi", x="Yakıt tipi", y="Ortalama yakıt tüketimi")
quantitatives<-data[,c(4,5,8,9,10,11,12,13)]
colnames(quantitatives)[3]<-"Fuel_cons_city"
colnames(quantitatives)[4]<-"Fuel_cons_hwy"
colnames(quantitatives)[5]<-"Fuel_cons_comb_L"
colnames(quantitatives)[6]<-"Fuel_cons_comb_mpg"
corr_quan<-corrplot(cor(quantitatives, method = "kendall"), method="number")
inv_corr_quan<-inv(corr_quan$corr)
inv_corr_quan2<-as.data.frame(inv_corr_quan)
inv_corr_quan2
data2<-data
lbl = LabelEncoder$new()
data2$`Vehicle Class`=lbl$fit_transform(data2$`Vehicle Class`)
data2$Transmission=lbl$fit_transform(data2$Transmission)
data2$TransmissionType=lbl$fit_transform(data2$TransmissionType)
encode_ordinal <- function(x, order = unique(x)) {
x <- as.numeric(factor(x, levels = order, exclude = NULL))
x
}
data2$`Fuel Type`<-encode_ordinal(data2$`Fuel Type`)
data2$TransmissionType<-as.factor(data2$TransmissionType)
data2$`Vehicle Class`<-as.factor(data2$`Vehicle Class`)
data2$`Fuel Type`<-as.factor(data2$`Fuel Type`)
data2$Transmission<-as.factor(data2$Transmission)
kumeleme<-data2[,c(3,4,7,10,13,15)]
kumeleme<-as.data.frame(kumeleme)
distances<-dist(kumeleme, method = "euclidean")
fit<- hclust(distances, method = "ward.D")
dend<-as.dendrogram(fit)
plot(color_branches(dend, k=4))
colSums(is.na(kumeleme))
set.seed(170599)
fviz_nbclust(kumeleme, kmeans, method = "wss")
km_result <- kmeans(kumeleme,4, iter.max=20, algorithm="Lloyd")
t(km_result$centers)
kumeleme$clusters<-km_result$cluster
kumeleme$clusters<-as.factor(kumeleme$clusters)
cluster1<-which(kumeleme$clusters==1)
cluster2<-which(kumeleme$clusters==2)
cluster3<-which(kumeleme$clusters==3)
cluster4<-which(kumeleme$clusters==4)
cluster11<-kumeleme[cluster1,]
cluster22<-kumeleme[cluster2,]
cluster33<-kumeleme[cluster3,]
cluster44<-kumeleme[cluster4,]
freq(cluster11[,c(1,3,6)])
freq(cluster22[,c(1,3,6)])
freq(cluster33[,c(1,3,6)])
freq(cluster44[,c(1,3,6)])
clusplot(kumeleme, km_result$cluster, main='2D representation of the Cluster solution',
color=TRUE, shade=TRUE,
labels=4, lines=0)
data2$clusters<-km_result$cluster
data2$clusters<-as.factor(data2$clusters)
freq(data2$clusters)
data3<-data[,-c(6,8,9,11)]
colnames(data3)= c("Make","Model","VehicleClass","EngineSize","Cylinders","FuelType","FuelConsComp","CO2Emission","CO2Rating","SmogRating","TransmissionType")
set.seed(17051999)
trainIndex<-sample(1:nrow(data3),size = round(0.7*nrow(data3)), replace = FALSE)
train_data<-data3[trainIndex,]
test_data<-data3[-trainIndex,]
tree2<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType, data = train_data, method = "class")
fancyRpartPlot(tree2, main = "Fuel type tree", type = 2)
confmat_FT<-table(predict(tree2, test_data, type = "class"), test_data$FuelType)
confmat_FT<-confmat_FT[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT)
tree2_preprun<-rpart( FuelType~ VehicleClass+ EngineSize+ Cylinders+ FuelConsComp+ CO2Emission+ CO2Rating+ SmogRating+ TransmissionType,
data = train_data, method = "class",
control = rpart.control(cp=0, maxdepth = 8, minsplit = 21))
fancyRpartPlot(tree2_preprun, main = "Fuel Type Prepruned Tree",type = 2)
confmat_FT_Pre<-table(predict(tree2_preprun, test_data, type = "class"), test_data$FuelType)
confmat_FT_Pre<-confmat_FT_Pre[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT_Pre)
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 8, minsplit = 22))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
ggplot(data, aes(y=data$`Fuel Consumption (City (L/100 km)`, x=factor(data$TransmissionType),fill=data$TransmissionType))+
geom_boxplot()+
labs(title = "Yakıt tipine göre şehir içi yakıt tüketimi", x="Yakıt tipi", y="Şehir içi yakıt tüketimi")
ggplot(data, aes(y=data$`Fuel Consumption (City (L/100 km)`, x=factor(data$`Fuel Type`),fill=data$`Fuel Type`))+
geom_boxplot()+
labs(title = "Yakıt tipine göre şehir içi yakıt tüketimi", x="Yakıt tipi", y="Şehir içi yakıt tüketimi")
ggplotly(scatter1)
scatter1<-ggplot(data, aes(data$`Fuel Consumption (City (L/100 km)`,data$`Fuel Consumption(Hwy (L/100 km))`, color=data$`Fuel Type`))+
geom_point(size=1,alpha=0.8)+
geom_smooth(method = "lm", col="green",se = FALSE)+
labs(title = "Şehir içi ve şehir dışı yakıt tüketimi saçılım grafiği", x="şehir içi", y="şehir dışı")
ggplotly(scatter1)
ggplot(data, aes(data$`Fuel Consumption (City (L/100 km)`,data$`Fuel Consumption(Hwy (L/100 km))`, color=data$`Fuel Type`))+
geom_point(size=1,alpha=0.8)+
geom_smooth(method = "lm", col="green",se = FALSE)+
labs(title = "Şehir içi ve şehir dışı yakıt tüketimi saçılım grafiği", x="şehir içi", y="şehir dışı")
ggplot(data, aes(data$`Fuel Consumption (City (L/100 km)`,data$`Fuel Consumption(Hwy (L/100 km))`, color=data$`Fuel Type`))+
geom_point(size=1,alpha=0.8)+
geom_smooth(method = "lm", col="green",se = FALSE)+
labs(title = "Şehir içi ve şehir dışı yakıt tüketimi saçılım grafiği", x="şehir içi", y="şehir dışı")
confmat_FT<-table(predict(tree2, test_data, type = "class"), test_data$FuelType)
confmat_FT<-confmat_FT[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT)
confmat_FT<-table(predict(tree2, test_data, type = "class"), test_data$FuelType)
confmat_FT<-confmat_FT[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT)
library(PerformanceAnalytics)
library(readxl)
library(rattle)
library(dplyr)
library(stringr)
library(ggplot2)
library(tidyverse)
library(corrplot)
library(matlib)
library(funModeling)
library(openxlsx)
library(stringr)
library(DescTools)
library(dendextend)
library(haven)
library(factoextra)
library(cluster)
library(plotly)
library(haven)
library(dendextend)
library(GGally)
library(superml)
library(rpart)
library(rpart.plot)
library(caret)
confmat_FT<-table(predict(tree2, test_data, type = "class"), test_data$FuelType)
confmat_FT<-confmat_FT[-c(1,2),-c(1,2)]
confusionMatrix(confmat_FT)
summary(tree2)
fancyRpartPlot(tree2, main = "Fuel type tree", type = 2)
fancyRpartPlot(tree2, main = "Fuel type tree", type = 2)
#model3
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType+ CO2Emission+ CO2Rating+ Smograting, data = train_data,
control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
#model3
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType+ CO2Emission+ CO2Rating+ SmogRating, data = train_data,
control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
fancyRpartPlot(tree3, type = 2, tweak=3, main = "Fuel Cons Comp Tree")
#model3
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType+ CO2Emission+ CO2Rating+ SmogRating, data = train_data,
control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
fancyRpartPlot(tree3, type = 2, tweak=3, main = "Fuel Cons Comp Tree")
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
printcp(tree3)
#model3
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data,
control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
fancyRpartPlot(tree3, type = 2, tweak=3, main = "Fuel Cons Comp Tree")
fancyRpartPlot(tree3, type = 2, tweak=3, main = "Fuel Cons Comp Tree")
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
printcp(tree3)
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 15))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 20))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 11))
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 10))
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 12))
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 11))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
```{r}
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 10))
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
tree3<-rpart( FuelConsComp~ VehicleClass +EngineSize+ Cylinders+ FuelType+ TransmissionType, data = train_data, control = rpart.control(cp=0, maxdepth = 9, minsplit = 11))
fancyRpartPlot(tree3, type = 2, tweak=1.7, main = "Fuel Cons Comp Tree")
printcp(tree3)
printcp(tree3)
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
defaultSummary(data.frame(obs=test_data$FuelConsComp, pred=round(predict(tree3,test_data),0)))
